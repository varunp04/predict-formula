#!/usr/bin/env python3
from inference import MakeInference
from pipeline import RunExperimentOnSagemaker
from hyperparameter import load_hyperparameters
from sklearn.tree import DecisionTreeRegressor
from evaluation import EvaluateModellingResults
from utils import load_config_file

import logging

logger = logging.getLogger()
logger.setLevel(logging.INFO)


def train(config):
    logger.info("starting Training for decision tree model")

    input_config_path = config.get("MODEL_ARTIFACTS_PATH_PREFIX") + config.get(
        "CONFIG_LOCATION"
    )

    hyperparamters_obj = load_hyperparameters(
        input_config_path=input_config_path,
        hyperparam_file_path=config.get("HYPERPARMETER_FILE_NAME"),
    )

    splitter = hyperparamters_obj.get("splitter", object_type=str)
    max_depth = hyperparamters_obj.get("max_depth", object_type=int)

    run_experiment_on_sagemaker = RunExperimentOnSagemaker()

    x, y = run_experiment_on_sagemaker.get_data()

    x_train, x_test, y_train, y_test = run_experiment_on_sagemaker.train_set_split(
        x=x, y=y, test_size=0.2
    )

    model = DecisionTreeRegressor(max_depth=max_depth, splitter=splitter)

    run_experiment_on_sagemaker.train_the_model(
        config=config, model=model, x_train=x_train, y_train=y_train
    )

    infer = MakeInference(config=config)

    predictions = infer.perform_inference(x_test=x_test)

    evaluate = EvaluateModellingResults()

    mse, mae = evaluate.get_metrics(actuals=y_test, predictions=predictions)

    logger.info(f"MSE: {mse}")
    logger.info(f"MAE: {mae}")


if __name__ == "__main__":
    config = load_config_file(file_name="config.yml")
    train(config=config)
